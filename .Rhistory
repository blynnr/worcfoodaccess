automobhighplot <- automob %>%
mutate(rat_cut = cut_interval(AUTORATIO, 5)) %>%
ggplot() +
geom_sf(aes(fill = rat_cut), color = NA) +
scale_fill_brewer(palette = "BuPu", name = "Driveway-to-Building \nArea Ratio by \nCensus Block Group", #"Area of Driveways:\nArea of Building \nFootprints",
labels = c("0 - 0.13", "0.13 - 0.27", "0.27 - 0.40", "0.40 - 0.54", "0.54 - 0.67"),  guide = guide_legend(override.aes = list(linetype = "blank", shape = NA))) +
geom_sf(data = highways, aes(color = "Highway"), show.legend = "line") +
scale_colour_manual(name = NULL, values = ("Highway" = "orangered2")) +
theme(legend.key = element_rect(fill = "white")) +
ggtitle("Automobility Infastructure \nin Worcester, MA") + # fix title
theme_void() + # Empty theme without axis lines and texts
theme(
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
legend.box.background = element_rect(fill = "transparent", colour = NA)
) +
coord_sf(datum = NA)
automobhighplot
# map automobility ratios as choropleth and add highways
automobhighplot <- automob %>%
mutate(rat_cut = cut_interval(AUTORATIO, 5)) %>%
ggplot() +
geom_sf(aes(fill = rat_cut), color = NA) +
scale_fill_brewer(palette = "BuPu", name = "Driveway-to-Building \nArea Ratio by \nCensus Block Group", #"Area of Driveways:\nArea of Building \nFootprints",
labels = c("0 - 0.13", "0.13 - 0.27", "0.27 - 0.40", "0.40 - 0.54", "0.54 - 0.67"),  guide = guide_legend(override.aes = list(linetype = "blank", shape = NA))) +
geom_sf(data = highways, aes(color = "Highway"), show.legend = "line") +
scale_colour_manual(name = NULL, values = ("Highway" = "orangered2")) +
theme(legend.key = element_rect(fill = "white")) +
ggtitle("Automobility Infastructure \nin Worcester, MA") + # fix title
theme_void() + # Empty theme without axis lines and texts
theme(
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
legend.box.background = element_rect(fill = "transparent", colour = NA)
) +
coord_sf(datum = NA) +
theme(plot.margin = unit(c(1,1,1,1), "in"))
automobhighplot
# map automobility ratios as choropleth and add highways
automobhighplot <- automob %>%
mutate(rat_cut = cut_interval(AUTORATIO, 5)) %>%
ggplot() +
geom_sf(aes(fill = rat_cut), color = NA) +
scale_fill_brewer(palette = "BuPu", name = "Driveway-to-Building \nArea Ratio by \nCensus Block Group", #"Area of Driveways:\nArea of Building \nFootprints",
labels = c("0 - 0.13", "0.13 - 0.27", "0.27 - 0.40", "0.40 - 0.54", "0.54 - 0.67"),  guide = guide_legend(override.aes = list(linetype = "blank", shape = NA))) +
geom_sf(data = highways, aes(color = "Highway"), show.legend = "line") +
scale_colour_manual(name = NULL, values = ("Highway" = "orangered2")) +
theme(legend.key = element_rect(fill = "white")) +
ggtitle("Automobility Infastructure \nin Worcester, MA") + # fix title
theme_void() + # Empty theme without axis lines and texts
theme(
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
legend.box.background = element_rect(fill = "transparent", colour = NA)
) +
coord_sf(datum = NA) +
theme(plot.margin = unit(c(1,1,1,1), "cm"))
automobhighplot
knitr::opts_chunk$set(echo = TRUE)
#library(igraph)
library(dplyr)
library(sf)
library(tidyverse)
library(ggmap)
library(mapview)
library(ggplot2)
# read in EJ Populations
maejpop <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/EJ_POLY.shp")
# project maejpop to EPSG:32618, WSG84 UTM Zone 18N
maejpop <- st_transform(x = maejpop, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# filter out worcester
ejpop <- maejpop %>% st_as_sf() %>% filter(TOWN == "WORCESTER")
# read in EIJ Populations
eijpop <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/eijpop.shp")
# project EIJ populations
eijpop <- st_transform(x = eijpop, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# fix EIJ pop column names
# HOW TO FIX THIS UPSTREAM? (like in eijpop.Rmd?)
eijpop <- eijpop %>% rename(AREA_SQFT = AREA_SQ, MINORITY = MINORIT, EJ_CRITERI = EJ_CRIT, AFFLUENT = AFFLUEN, ENGLISHPROF = ENGLISHP)
# read in Worcester Census Tracts
ct <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Census_Tracts_2010.shp")
# project wct to EPSG:32618, WSG84 UTM Zone 18N
ct <- st_transform(x = ct, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# read in food desert csv
fd <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/DesAtlas_2015_WorcSel.csv")
# join fd .csv to census tract geometries
fdct <- left_join(ct %>% as.data.frame, fd, by = c("GEOID10" = "CensusTract")) %>%
as_tibble %>% st_as_sf()
# select EJ Populations (High Minority, Low Income, High English Proficiency) which fall in food deserts
fdejpop <- st_intersection(ejpop %>% filter(EJ_CRITERI == "MIE"), fdct %>%
filter(LILATracts_1And10 == "1" | LILATracts_halfAnd10 == "1")) %>%
st_buffer(., dist = 0, endCapStyle = "ROUND", joinStyle = "ROUND") %>%
mutate(INT_AREA = st_area(.) %>% measurements::conv_unit(., "m2", "ft2") %>% as.numeric) %>%
st_as_sf() %>%
filter(near(AREA_SQFT, INT_AREA, tol = 100000))
# # write fdej selection to shapefile
# st_write(fdejpop, "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/fdejpop.shp")
# select EIJ Populations (AWP) which fall outside of food deserts
fdeijpop <- st_intersection(eijpop %>% filter(EIJ_GRP == "WAP"), fdct %>% filter(LILATracts_1And10 == "0" | LILATracts_halfAnd10 == "0")) %>%
st_buffer(., dist = 0, endCapStyle = "ROUND", joinStyle = "ROUND") %>%
mutate(INT_AREA = st_area(.) %>% measurements::conv_unit(., "m2", "ft2") %>% as.numeric) %>%
st_as_sf() %>%
filter(near(AREA_SQFT, INT_AREA, tol = 100000))
# # write fdeij to shapefile
# st_write(fdeijpop, "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/fdeijpop.shp")
# read in property parcels (from Worcester 2019 geodatabase)
parcels <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Basemap_Parcels_Polygons_19.shp")
head(parcels)
# project parcels to EPSG:32618, WSG84 UTM Zone 18N
parcels <- st_transform(x = parcels, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) %>% st_as_sf()
# clip parcels data to only include area of food desert ejpops
parcelsinterfd <- st_intersection(x = fdejpop %>% select(AREA_SQFT, POP100_RE, MED_HH_INC, PCT_MIN, ENGLISH, INCOME, MINORITY, EJ_CRITERI, LILATracts_1And10, LILATracts_halfAnd10, LILATracts_1And20, LILATracts_Vehicle), y = parcels)
# read in property parcel ownership database (from ESRI geodatabase) as tibble
parcelsdb <- st_read(dsn = "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Worcester2019.gdb", layer = "BASEMAP_PARCELS_DATABASE", as_tibble = TRUE)
head(parcelsdb)
# join parcels database to fdejpop parcels shapefile (with respective fields "GIS_MBL" and "MAP_PAR_ID")
fdparcels <- left_join(parcelsinterfd %>% as.data.frame, parcelsdb %>% #select(CLASS, OWNER, RODYEAR, MAIL_STRET, MAIL_CITY, MAIL_STATE, MAIL_ZIP5, VALUE, ZONE, ZONE_NAME, BLDDESC, HOUSE_NO, STREET_PRE, STREET, LND_VALU, BLD_VALU, MAIL_STR2, GIS_MBL) %>%
as.data.frame, by = c("MAP_PAR_ID" = "GIS_MBL")) %>%
as_tibble %>% st_as_sf() # do I need these??
# convert parcel geometries to points
# filter out residential properties only based on ZONE_NAME
res <- c("RESIDENTIAL", "RESIDENT")
fdparcels <- fdparcels %>%
filter(., str_detect(ZONE_NAME, paste(res, collapse="|")))
# Which owners are located within the food desert MEI areas?
own_fdej <- st_intersection(x = fdejpop %>% select(GEOID10, geometry), y = ownership_gc)
#mapview(own_fdej)
# Which owners are located within the non-food desert WAP areas?
own_fdeij <- st_intersection(x = fdeijpop %>% select(GEOID10, geometry), y = ownership_gc)
#mapview(own_fdeij)
# experimenting
# par(mar = c(0, 0, 0, 0))
# plot(st_geometry(fdejpop), col = "grey")
# plot(st_geometry(own_fdeij), col = "blue", pch = 20, add = TRUE)
# load in towns data to extract worcester boundary
worcester <- read_sf("C:/Users/Brenna Robeson/Documents/MassINC_Data/town_geo/gcboundaries.shp") %>%
st_transform(., crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) %>% filter(TOWN == 'WORCESTER')
# convert fdparcels into centroids
fdparcels_wown <- inner_join(x = fdparcels %>% as.data.frame, y = own_fdeij %>% as.data.frame, by = "MAP_PAR_ID") %>%
st_as_sf %>%
st_centroid()
# plot parcels
ownership_eij2ej <- ggplot() +
geom_sf(data = worcester, fill = "gray80", col = "gray80", show.legend = FALSE) +
geom_sf(data = fdeijpop, aes(fill = "Non-Food Desert EIJ WAP Pop")) +
geom_sf(data = fdejpop, aes(fill = "Food Desert EJ MIE Pop")) +
geom_sf(data = fdparcels_wown, aes(colour = "Property Parcel"), pch = 16, show.legend = "point") +
geom_sf(data = own_fdeij, aes(colour = "Owner Location"), show.legend = "point") +
scale_fill_manual(name = "", values = c("Non-Food Desert EIJ WAP Pop" = "darkgoldenrod1", "Food Desert EJ MIE Pop" = "orchid"),
guide = guide_legend(override.aes = list(linetype = c("blank", "blank"), shape = c(NA, NA)))) +
scale_colour_manual(name = "", values = c("Property Parcel" = "darkslateblue", "Owner Location" = "orangered2"),
guide = guide_legend(override.aes = list(linetype = c("blank", "blank"), shape = c(16, 16)))) +
theme(legend.key = element_rect(fill = "white")) +
ggtitle("Relational Property Ownership Patterns \nBreaching Food Desert Boundaries in Worcester, MA") +
theme_void() + # Empty theme without axis lines and texts
theme(
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
legend.box.background = element_rect(fill = "transparent", colour = NA)
) +
coord_sf(datum = NA) +
theme(plot.margin = unit(c(1,1,1,1), "cm"))
ownership_eij2ej
# export map to .png
ggplot2::ggsave(ownership_eij2ej, filename = "C:/Users/Brenna Robeson/OneDrive/GEOG346/worcfoodaccess/figures/ownership_plot.png",
width = 6, height = 5, units = "in", dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
#library(igraph)
library(dplyr)
library(sf)
library(tidyverse)
library(ggmap)
library(mapview)
library(ggplot2)
# read in EJ Populations
maejpop <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/EJ_POLY.shp")
# project maejpop to EPSG:32618, WSG84 UTM Zone 18N
maejpop <- st_transform(x = maejpop, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# filter out worcester
ejpop <- maejpop %>% st_as_sf() %>% filter(TOWN == "WORCESTER")
# read in EIJ Populations
eijpop <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/eijpop.shp")
# project EIJ populations
eijpop <- st_transform(x = eijpop, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# fix EIJ pop column names
# HOW TO FIX THIS UPSTREAM? (like in eijpop.Rmd?)
eijpop <- eijpop %>% rename(AREA_SQFT = AREA_SQ, MINORITY = MINORIT, EJ_CRITERI = EJ_CRIT, AFFLUENT = AFFLUEN, ENGLISHPROF = ENGLISHP)
# read in Worcester Census Tracts
ct <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Census_Tracts_2010.shp")
# project wct to EPSG:32618, WSG84 UTM Zone 18N
ct <- st_transform(x = ct, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# read in food desert csv
fd <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/DesAtlas_2015_WorcSel.csv")
# join fd .csv to census tract geometries
fdct <- left_join(ct %>% as.data.frame, fd, by = c("GEOID10" = "CensusTract")) %>%
as_tibble %>% st_as_sf()
# select EJ Populations (High Minority, Low Income, High English Proficiency) which fall in food deserts
fdejpop <- st_intersection(ejpop %>% filter(EJ_CRITERI == "MIE"), fdct %>%
filter(LILATracts_1And10 == "1" | LILATracts_halfAnd10 == "1")) %>%
st_buffer(., dist = 0, endCapStyle = "ROUND", joinStyle = "ROUND") %>%
mutate(INT_AREA = st_area(.) %>% measurements::conv_unit(., "m2", "ft2") %>% as.numeric) %>%
st_as_sf() %>%
filter(near(AREA_SQFT, INT_AREA, tol = 100000))
# # write fdej selection to shapefile
# st_write(fdejpop, "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/fdejpop.shp")
# select EIJ Populations (AWP) which fall outside of food deserts
fdeijpop <- st_intersection(eijpop %>% filter(EIJ_GRP == "WAP"), fdct %>% filter(LILATracts_1And10 == "0" | LILATracts_halfAnd10 == "0")) %>%
st_buffer(., dist = 0, endCapStyle = "ROUND", joinStyle = "ROUND") %>%
mutate(INT_AREA = st_area(.) %>% measurements::conv_unit(., "m2", "ft2") %>% as.numeric) %>%
st_as_sf() %>%
filter(near(AREA_SQFT, INT_AREA, tol = 100000))
# # write fdeij to shapefile
# st_write(fdeijpop, "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/fdeijpop.shp")
# read in property parcels (from Worcester 2019 geodatabase)
parcels <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Basemap_Parcels_Polygons_19.shp")
head(parcels)
# project parcels to EPSG:32618, WSG84 UTM Zone 18N
parcels <- st_transform(x = parcels, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) %>% st_as_sf()
# clip parcels data to only include area of food desert ejpops
parcelsinterfd <- st_intersection(x = fdejpop %>% select(AREA_SQFT, POP100_RE, MED_HH_INC, PCT_MIN, ENGLISH, INCOME, MINORITY, EJ_CRITERI, LILATracts_1And10, LILATracts_halfAnd10, LILATracts_1And20, LILATracts_Vehicle), y = parcels)
# read in property parcel ownership database (from ESRI geodatabase) as tibble
parcelsdb <- st_read(dsn = "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Worcester2019.gdb", layer = "BASEMAP_PARCELS_DATABASE", as_tibble = TRUE)
head(parcelsdb)
# join parcels database to fdejpop parcels shapefile (with respective fields "GIS_MBL" and "MAP_PAR_ID")
fdparcels <- left_join(parcelsinterfd %>% as.data.frame, parcelsdb %>% #select(CLASS, OWNER, RODYEAR, MAIL_STRET, MAIL_CITY, MAIL_STATE, MAIL_ZIP5, VALUE, ZONE, ZONE_NAME, BLDDESC, HOUSE_NO, STREET_PRE, STREET, LND_VALU, BLD_VALU, MAIL_STR2, GIS_MBL) %>%
as.data.frame, by = c("MAP_PAR_ID" = "GIS_MBL")) %>%
as_tibble %>% st_as_sf() # do I need these??
# convert parcel geometries to points
# filter out residential properties only based on ZONE_NAME
res <- c("RESIDENTIAL", "RESIDENT")
fdparcels <- fdparcels %>%
filter(., str_detect(ZONE_NAME, paste(res, collapse="|")))
head(parcels)
view(head(parcels))
### REGISTER GOOGLE API KEY #####################
# register_google(key = "---", write = TRUE)
################################################
# # create more comprehensive address column to address "c/o"s in MAIL_STRET
# fdparcels <- fdparcels %>% mutate(MAIL_STR_CMB = MAIL_STR) %>% # how to identify c/os??? grepl/grep selection isn't working
# assess how many might be po box numbers...
# what does ggmap do with invalid/unlocated addresses?
# # concatenate different address pieces into a full address for geocoding
# fdparcels_add <- unite(fdparcels %>% as.data.frame(), ADDRESS_FULL, MAIL_STRET, MAIL_CITY, MAIL_STATE, MAIL_ZIP5, sep = ", ", remove = FALSE) %>% as_tibble()
#
# # create seperate object to geocode owner addresses
# ownership <- fdparcels_add %>% select(MAP_PAR_ID, ADDRESS_FULL)
#
# # use address column to geocode ownership locations
# ownership_gc <- ownership %>% as.data.frame() %>%
#   mutate_geocode(., ADDRESS_FULL) %>%
#   as_tibble()
# head(ownership_gc)
# # save results of geocoding to .csv
# st_write(ownership_gc, "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/ownership_gccoord.csv")
# read in csv with geocoded ownership addresses
ownership_gc <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/fdej_ownership_gc.csv")
# clean geocoded ownership coordinate locations
ownership_gc <- ownership_gc %>%
rename(lon = lat, lat = lon)
# convert csv with ownership locations to sf object
ownership_gc <- ownership_gc %>% filter(!lon =="") %>%
st_as_sf(., coords = c("lat", "lon"), crs = 4326) %>%
st_transform(x = ., crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# explore location of ownership points relative to fdej and fdeij
par(mar = c(0, 0, 0, 0))
plot(st_geometry(fdeijpop), col = "grey")
plot(st_geometry(fdejpop), col = "orange", add = TRUE)
plot(st_geometry(ownership_gc), col = "blue", pch = 1, add = TRUE)
#mapview(ownership_gc)
# # export ownership_gc as .shp
# st_write(ownership_gc, "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/fdej_parcel_ownership.shp")
# Which owners are located within the food desert MEI areas?
own_fdej <- st_intersection(x = fdejpop %>% select(GEOID10, geometry), y = ownership_gc)
#mapview(own_fdej)
# Which owners are located within the non-food desert WAP areas?
own_fdeij <- st_intersection(x = fdeijpop %>% select(GEOID10, geometry), y = ownership_gc)
#mapview(own_fdeij)
# experimenting
# par(mar = c(0, 0, 0, 0))
# plot(st_geometry(fdejpop), col = "grey")
# plot(st_geometry(own_fdeij), col = "blue", pch = 20, add = TRUE)
# load in towns data to extract worcester boundary
worcester <- read_sf("C:/Users/Brenna Robeson/Documents/MassINC_Data/town_geo/gcboundaries.shp") %>%
st_transform(., crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) %>% filter(TOWN == 'WORCESTER')
# convert fdparcels into centroids
fdparcels_wown <- inner_join(x = fdparcels %>% as.data.frame, y = own_fdeij %>% as.data.frame, by = "MAP_PAR_ID") %>%
st_as_sf %>%
st_centroid()
# plot parcels
ownership_eij2ej <- ggplot() +
geom_sf(data = worcester, fill = "gray80", col = "gray80", show.legend = FALSE) +
geom_sf(data = fdeijpop, aes(fill = "Non-Food Desert EIJ WAP Pop")) +
geom_sf(data = fdejpop, aes(fill = "Food Desert EJ MIE Pop")) +
geom_sf(data = fdparcels_wown, aes(colour = "Property Parcel"), pch = 16, show.legend = "point") +
geom_sf(data = own_fdeij, aes(colour = "Owner Location"), show.legend = "point") +
scale_fill_manual(name = "", values = c("Non-Food Desert EIJ WAP Pop" = "darkgoldenrod1", "Food Desert EJ MIE Pop" = "orchid"),
guide = guide_legend(override.aes = list(linetype = c("blank", "blank"), shape = c(NA, NA)))) +
scale_colour_manual(name = "", values = c("Property Parcel" = "darkslateblue", "Owner Location" = "orangered2"),
guide = guide_legend(override.aes = list(linetype = c("blank", "blank"), shape = c(16, 16)))) +
theme(legend.key = element_rect(fill = "white")) +
ggtitle("Relational Property Ownership Patterns \nBreaching Food Desert Boundaries in Worcester, MA") +
theme_void() + # Empty theme without axis lines and texts
theme(
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
legend.box.background = element_rect(fill = "transparent", colour = NA)
) +
coord_sf(datum = NA) +
theme(plot.margin = unit(c(1,1,1,1), "cm"))
ownership_eij2ej
# export map to .png
ggplot2::ggsave(ownership_eij2ej, filename = "C:/Users/Brenna Robeson/OneDrive/GEOG346/worcfoodaccess/figures/ownership_plot.png",
width = 6, height = 5, units = "in", dpi = 300)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(sf)
library(tidyverse)
#library(tidycensus)
#library(tigris)
# data source: see eijpop vignette
# read in Worcester city boundary
worc <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/TOWNS_POLY.shp") %>% st_transform(x = ., crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) %>% filter(TOWN == "WORCESTER")
# read in ej pop data
maejpop <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/EJ_POLY.shp")
# project maejpop to EPSG:32618, WSG84 UTM Zone 18N
maejpop <- st_transform(x = maejpop, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# filter out Worcester-only data and view first few rows
ejpop <- maejpop %>% st_as_sf() %>% filter(TOWN == "WORCESTER")
head(ejpop)
# read in MA census block groups
macbg <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/CENSUS2010BLOCKGROUPS_POLY.shp")
# project maejpop to EPSG:32618, WSG84 UTM Zone 18N
macbg <- st_transform(x = macbg, crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# filter out only Worcester block groups
cbg <- macbg %>% st_as_sf() %>% filter(GEOID10 %in% 250277301001:250277331022)
head(cbg)
# join ejpop data to cbg data
ejjoincol <- ejpop %>% select(LOGSF1, MINORITY, INCOME, ENGLISH, EJ_CRITERI)
cbg_ejpop <- left_join(cbg %>% select(GEOID10, LOGSF1) %>% as_tibble,
ejjoincol %>% as.data.frame() %>% select(-geometry),
by = "LOGSF1") %>% st_as_sf()
# # test results of join
# ejjoincol %>% filter(LOGSF1 == 171758)
# cbg %>% filter(LOGSF1 == 171758)
# cbg_ejpop %>% filter(LOGSF1 == 171758)
#
# cbg_ejpop %>% st_as_sf() %>% select(MINORITY) %>% plot()
# cbg_ejpop %>% filter(!is.na(MINORITY))
# create new columns WHITE, AFFLUENT, ENGLISHPROF, EIJ_CRITERI in cbg_ejpop
cbg_ejpop <- cbg_ejpop %>%
mutate(WHITE = ifelse(is.na(MINORITY), "W", NA)) %>%
mutate(AFFLUENT = ifelse(is.na(INCOME), "A", NA)) %>%
mutate(ENGLISHPROF = ifelse(is.na(ENGLISH), "P", NA)) %>%
unite(EIJ_GRP, WHITE, AFFLUENT, ENGLISHPROF, sep = "", remove = FALSE) %>%
mutate(EIJ_GRP = gsub("NA", "", EIJ_GRP))
# create eij pop which includes only eij populations
eijpop <- cbg_ejpop %>% filter(EIJ_GRP != "")
# read in driveways data, project to EPSG:32618, WSG84 UTM Zone 18N, and vaildate geometries
# data source: City of Worcester
drive <- read_sf("C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Basemap_Driveways.shp") %>%
st_transform(x = ., crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) %>%
st_as_sf() %>% lwgeom::st_make_valid()
head(drive)
# read in buildings data, project to EPSG:32618, WSG84 UTM Zone 18N, and vaildate geometries
# data source: City of Worcester
build <- st_read(dsn = "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Worcester2019.gdb", layer = "Basemap_Buildings", as_tibble = TRUE) %>%
st_transform(x = ., crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs")) %>%
st_as_sf() %>% lwgeom::st_make_valid()
head(build)
# data exploration - overall driveway to building area ratio in Worcester
overratio <- sum(drive$SHAPE_Area) / sum(build$Shape_Area)
overratio
# read in roads data, project to EPSG:32618, WSG84 UTM Zone 18N
roads <- st_read(dsn = "C:/Users/Brenna Robeson/OneDrive/Masters_Research_Project/Empirics/GIS_Analysis/extdata/Worcester2019.gdb", layer = "Basemap_Street_Centerlines", as_tibble = TRUE) %>%
st_transform(x = ., crs = st_crs("+proj=utm +zone=18 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"))
# create selection of highways to be displayed over auto ratio and clip out anything falling outside worcester
highways <- roads %>% filter(ROADCLASS == "Highway") %>% st_intersection(x = worc, y = .)
plot(st_geometry(highways))
plot(st_geometry(worc), add = TRUE)
### DRIVEWAYS ##################################
# convert driveway polygons to centroids with one variable - `SHAPE_Area`
drivecent <- drive[7] %>% st_centroid()
# spatial join of driveway centroids to block groups from cbg_ejpop then take sum by block group
geopv <- cbg_ejpop %>% filter(GEOID10 == 250277318003) %>% select(geometry) # to account for a block group without any driveway geometries which would otherwise be lost in the spatial join
drivecbg <- cbg_ejpop %>%
select(GEOID10) %>%
st_join(drivecent, ., left = TRUE) %>%
group_by(GEOID10) %>%
summarize(BG_DSUM = sum(SHAPE_Area)) %>%
as.data.frame %>%
add_row(., GEOID10 = "250277318003", BG_DSUM = 0, geometry = st_geometry(geopv)) %>%
as_tibble %>% st_as_sf()
### BUILDINGS ##################################
# convert building polygons to centroids
buildcent <- build[15] %>% st_centroid()
# spatial join of building centroids (with area variable) to block groups from cbg_ejpop then take sum by block group
buildcbg <- cbg_ejpop %>%
select(GEOID10) %>%
st_join(buildcent, ., left = TRUE) %>%
group_by(GEOID10) %>%
summarize(BG_BSUM = sum(Shape_Area))
# for each block group in cbg_ejpop, divide `BG_DSUM` by `BG_BSUM` into new field `AUTORATIO`
cbg_ejpop_d <- left_join(cbg_ejpop %>%
as.data.frame, drivecbg %>%
as.data.frame() %>% select(-geometry),
by = "GEOID10") %>%
as_tibble %>% st_as_sf()
automob <- left_join(cbg_ejpop_d %>%
as.data.frame, buildcbg %>%
as.data.frame(),
by = "GEOID10") %>%
as_tibble %>% st_as_sf() %>%
mutate(AUTORATIO = BG_DSUM / BG_BSUM)
# # test that values are consistient between drivecbg and joined table
# drivecbg %>% filter(GEOID10 == 250277304011)
# autoratiotest %>% filter(GEOID10 == 250277304011) %>% select(BG_DSUM)
#
# # test that values consistient between buildcbg and joined output
# buildcbg %>% filter(GEOID10 == 250277304011)
# autoratiotest %>% filter(GEOID10 == 250277304011) %>% select(BG_BSUM)
# map Enviro Injustice Popuations for reference
cbg_plot <- cbg %>% st_geometry()
eijpopplot <- ggplot() +
geom_sf(data = cbg_plot) +
geom_sf(data = eijpop, aes(fill = EIJ_GRP), legend = polygon) +
scale_fill_brewer(palette = "Dark2", name = "Criteria", labels = c("Affluent", "Affluent and English \nProficient", "English Proficient", "White, Affluent, and \nEnglish Proficient", "White and English \nProficient")) +
ggtitle("Environmental Injustice \nPopulations in Worcester, MA") +
coord_sf(datum = NA)
eijpopplot
# map automobility ratios as choropleth
automobplot <- automob %>%
mutate(rat_cut = cut_interval(AUTORATIO, 5)) %>%
ggplot() +
geom_sf(aes(fill = rat_cut), color = NA) +
scale_fill_brewer(palette = "BuPu", name = "Area of Driveways:\nArea of Building \nFootprints", labels = c("0 - 0.13", "0.13 - 0.27", "0.27 - 0.40", "0.40 - 0.54", "0.54 - 0.67")) +
ggtitle("Automobility Infastructure \nRatios by Census Block \nGroup in Worcester, MA") +
coord_sf(datum = NA)
automobplot
# map automobility ratios as choropleth and add highways
automobhighplot <- automob %>%
mutate(rat_cut = cut_interval(AUTORATIO, 5)) %>%
ggplot() +
geom_sf(aes(fill = rat_cut), color = NA) +
scale_fill_brewer(palette = "BuPu", name = "Driveway-to-Building \nArea Ratio by \nCensus Block Group", #"Area of Driveways:\nArea of Building \nFootprints",
labels = c("0 - 0.13", "0.13 - 0.27", "0.27 - 0.40", "0.40 - 0.54", "0.54 - 0.67"),  guide = guide_legend(override.aes = list(linetype = "blank", shape = NA))) +
geom_sf(data = highways, aes(color = "Highway"), show.legend = "line") +
scale_colour_manual(name = NULL, values = ("Highway" = "orangered2")) +
theme(legend.key = element_rect(fill = "white")) +
ggtitle("Automobility Infastructure \nin Worcester, MA") + # fix title
theme_void() + # Empty theme without axis lines and texts
theme(
panel.background = element_rect(fill = "transparent", colour = NA),
plot.background = element_rect(fill = "transparent", colour = NA),
legend.background = element_rect(fill = "transparent", colour = NA),
legend.box.background = element_rect(fill = "transparent", colour = NA)
) +
coord_sf(datum = NA) #+
#theme(plot.margin = unit(c(1,1,1,1), "cm"))
automobhighplot
fs::dir_create(Sys.getenv("R_LIBS_USER"))
install.packages("fs")
fs::dir_create(Sys.getenv("R_LIBS_USER"))
fs::dir_create("~/Library/R/3.5/library")
fs::dir_create("~/Library/R/4.0.2/library")
pkgs <- fs::path_file(fs::dir_ls("~/Library/R/3.6.3/library"))
fs::dir_create("~/Library/R/3.5/library")
R_LIBS_USER
library(fs)
# create a directory... where? why? idk
fs::dir_create(Sys.getenv("R_LIBS_USER"))
# Create a new directory for the version of R
fs::dir_create("~/Library/R/4.0/library")
# Lookup what packages were in your old package library (old lib is 3.6)
pkgs <- fs::path_file(fs::dir_ls("~/Library/R/3.6/library"))
# create a directory... where? why? idk
fs::dir_create(Sys.getenv("R_LIBS_USER"))
# Create a new directory for the version of R
fs::dir_create("C:/Users/Brenna Robeson/Documents/R/win-library/4.0/library")
# Lookup what packages were in your old package library (old lib is 3.6)
pkgs <- fs::path_file(fs::dir_ls("~/Documents/R/win-library/3.6/library"))
# Lookup what packages were in your old package library (old lib is 3.6)
pkgs <- fs::path_file(fs::dir_ls("~/Documents/R/win-library/3.6"))
# Install the packages in the new version
install.packages(pkgs)
# Install the packages in the new version
install.packages(pkgs)
library(devtools)
library(devtools)
install.packages("backports")
install.packages("backports")
library(devtools)
#install.packages("kableExtra")
#install.packages("data.table")
install_github("agroimpacts/geospaar", build = TRUE,
auth_token = "d56d468fbe307c1dad3c01856ecb6272b07cb532",
force = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
install.packages("Rtools")
install_github("blynnr/worcfoodaccess", build = TRUE,
+                auth_token = "d56d468fbe307c1dad3c01856ecb6272b07cb532",
+                force = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
install_github("blynnr/worcfoodaccess", build = TRUE,
auth_token = "d56d468fbe307c1dad3c01856ecb6272b07cb532",
force = TRUE, build_opts = c("--no-resave-data", "--no-manual"))
R.version.string
update.packages(ask = FALSE, checkBuilt = TRUE)
usethis::edit_r_environ()
usethis::git_sitrep()
